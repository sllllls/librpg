===================
MapObject (virtual)
===================

MapObjects represent interactive objects on the map, such as NPCs, chests and switches. For it to be interactive, overload its activate() method.

-----
Usage
-----

MapObjects are typically created and placed on the map during its initialize() routine. They may also be created and placed as a result of some event, during the map's gameloop.

To create a MapObject, write a class that inherits from it (say, MyObject), overloading its activate() method. To place it on a map, instantiate it and use map.add_object().

----------
Attributes
----------

image: ObjectImage (read-only)
Image of the MapObject. If this field is None, the object will be invisible.

map: MapModel (read-only)
The MapModel in which the MapObject was placed. None is if it not placed in any map.

position: Position (read-only)
Where on the map the MapObject is. None if it is not in any map.

obstacle: int (read-only)
0 if a party or an object can move over this object, 3 if they can move under it, 1 if it is considered an obstacle. If it is a counter - that is, if push key events may affect objects on the other side of it -, this attribute is set to 2.

facing: Direction (public)
Direction that the object is facing.

speed: int (public)
Object speed, in the number of frames to move that object by 1 tile. Use VERY_FAST_SPEED, FAST_SPEED, NORMAL_SPEED, SLOW_SPEED and VERY_SLOW_SPEED.
    
movement_phase: int (private)
0 if still, 1 to speed if in the middle of a movement.

-------
Methods
-------

__init__(obstacle: int, image = None: ObjectImage, facing = Direction.DOWN: Direction, speed = MapObject.NORMAL_SPEED: int)
Creates the MapObject.

activate(party: Party) (virtual)
Called when an activation is requested to the object, an event triggered when the party uses the Activation button facing (is the object is an obstacle) or on the object (when it is not). For example, for a chest, this routine will award the party's inventory some items, while for an NPC, this routine will trigger a chat.

collide_party(party: Party) (virtual)
Called when a collision is detected, an event that occurs when the party tries to move towards the object (for obstacles) or when it moves over the obstacle (for non-obstacles).

is_counter() -> bool
Returns whether the object is a counter - that is, if push key events may affect objects on the other side of it.

is_obstacle() -> bool
Returns whether the object is an obstacle.

is_below() -> bool
Returns whether the tile is drawn below party level.

is_above() -> bool
Returns whether the tile is drawn above party level.

get_surface() -> Surface
Returns a surface with the image as the object should be drawn.


=================
MapArea (virtual)
=================

MapAreas represent areas that, when entered or left, trigger some event, for example teleport areas from one map to another.

-----
Usage
-----

MapAreas are typically created and placed on the map during its initialize() routine. They may also be created and placed as a result of some event, during the map's gameloop.

To create a MapArea, write a class that inherits from it (say, MyArea), overloading some of its callbacks (party_entered(), party_moved(), party_left(), object_entered(), object_moved(), object_left()). To place it on a map, instantiate it and use map.add_area().

----------
Attributes
----------

map: Map
The map in which the MapArea was placed, None if it wasn't or was already removed.

top: int
bottom: int
left: int
right: int
The limits of the area. The area includes the tiles on these limits, so an (x, y) position is inside it only if left <= x <= right and bottom <= y <= top.

-------
Methods
-------

__init__(top_left: Position, bottom_right: Position)
Creates a MapArea that includes all the positions in the specified rectangular range, which includes the rows and columns of the top_left and bottom_right positions.

party_entered(party: Party, position: Position) (virtual)
Callback triggered when the party enters a tile of this area from a tile outside it. The arguments will be the party and the position that the party went to.

party_moved(party: Party, position: Position) (virtual)
Callback triggered when the party enters a tile of this area, either from inside or outside it. The arguments will be the party and the position that the party went to.

party_left(party: Party, position: Position) (virtual)
Callback triggered when the party enters a tile of this area, either from inside or outside it. The arguments will be the party and the position that the party left, which is inside the area.

object_entered(object: MapObject, position: Position) (virtual)
Callback triggered when an object enters a tile of this area from a tile outside it. The arguments will be the party and the position that the party went to.

object_moved(object: MapObject, position: Position) (virtual)
Callback triggered when an object enters a tile of this area, either from inside or outside it. The arguments will be the party and the position that the party went to.

object_left(object: MapObject, position: Position) (virtual)
Callback triggered when an object enters a tile of this area, either from inside or outside it. The arguments will be the party and the position that the party left, which is inside the area.
